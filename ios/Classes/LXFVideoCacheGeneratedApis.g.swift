// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LXFVideoCacheHostApi {
  /// 转换为缓存代理URL
  func convertToCacheProxyUrl(url: String) throws -> String
  /// 设置可用的缓存大小
  func setMaxCacheLength(cacheSize: Int64) throws
  /// 获取当前缓存大小
  func getCacheLength() throws -> Int64
  /// 删除所有的缓存
  func deleteAllCaches() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LXFVideoCacheHostApiSetup {
  /// The codec used by LXFVideoCacheHostApi.
  /// Sets up an instance of `LXFVideoCacheHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LXFVideoCacheHostApi?) {
    /// 转换为缓存代理URL
    let convertToCacheProxyUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_cache.LXFVideoCacheHostApi.convertToCacheProxyUrl", binaryMessenger: binaryMessenger)
    if let api = api {
      convertToCacheProxyUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        do {
          let result = try api.convertToCacheProxyUrl(url: urlArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      convertToCacheProxyUrlChannel.setMessageHandler(nil)
    }
    /// 设置可用的缓存大小
    let setMaxCacheLengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_cache.LXFVideoCacheHostApi.setMaxCacheLength", binaryMessenger: binaryMessenger)
    if let api = api {
      setMaxCacheLengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let cacheSizeArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.setMaxCacheLength(cacheSize: cacheSizeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setMaxCacheLengthChannel.setMessageHandler(nil)
    }
    /// 获取当前缓存大小
    let getCacheLengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_cache.LXFVideoCacheHostApi.getCacheLength", binaryMessenger: binaryMessenger)
    if let api = api {
      getCacheLengthChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getCacheLength()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getCacheLengthChannel.setMessageHandler(nil)
    }
    /// 删除所有的缓存
    let deleteAllCachesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_cache.LXFVideoCacheHostApi.deleteAllCaches", binaryMessenger: binaryMessenger)
    if let api = api {
      deleteAllCachesChannel.setMessageHandler { _, reply in
        do {
          try api.deleteAllCaches()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      deleteAllCachesChannel.setMessageHandler(nil)
    }
  }
}
